7b) Write a program illustrating isAlive() and join ()
Source Code:
class MyThread extends Thread {
public void run() {
try {
for (int i = 1; i <= 5; i++) {
System.out.println(Thread.currentThread().getName() + ": " +

i);

Thread.sleep(500); // Sleep for 500 milliseconds
}
} catch (InterruptedException e) {
System.out.println(e);
}
}
}
public class ThreadAliveJoinExample {
public static void main(String[] args) {
try {
MyThread t1 = new MyThread();
MyThread t2 = new MyThread();
t1.setName("Thread 1");
t2.setName("Thread 2");
// Start the threads
t1.start();
t2.start();
// Check if t1 is alive

System.out.println("Is " + t1.getName() + " alive? " +

t1.isAlive());

// Join t1, current thread (main) waits for t1 to finish
t1.join();
System.out.println(t1.getName() + " has finished execution.");
// Check again if t1 is alive after join
System.out.println("Is " + t1.getName() + " alive? " +

t1.isAlive());

// Join t2, main thread waits for t2 to finish
t2.join();
System.out.println(t2.getName() + " has finished execution.");
} catch (InterruptedException e) {
System.out.println(e);
}
// Both threads should have completed at this point
System.out.println("Both threads have completed execution.");
}
}
Output:
Is Thread 1 alive? true
Thread 2: 1
Thread 1: 1
Thread 2: 2
Thread 1: 2
Thread 2: 3
Thread 1: 3
Thread 2: 4
Thread 1: 4
Thread 1: 5
Thread 2: 5
Thread 1 has finished execution.
Is Thread 1 alive? false
Thread 2 has finished execution.
Both threads have completed execution.
